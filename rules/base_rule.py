#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ÂêåÊ≠•ËßÑÂàôÂü∫Á±ª
ÂÆö‰πâÊâÄÊúâÂêåÊ≠•ËßÑÂàôÁöÑÈÄöÁî®Êé•Âè£ÂíåË°å‰∏∫
"""

from abc import ABC, abstractmethod
from pathlib import Path
from typing import Dict, Any, Optional
import logging

logger = logging.getLogger(__name__)

class SyncRule(ABC):
    """ÂêåÊ≠•ËßÑÂàôÂü∫Á±ª"""
    
    def __init__(self, name: str, priority: int = 0, enabled: bool = True):
        """
        ÂàùÂßãÂåñÂêåÊ≠•ËßÑÂàô
        
        Args:
            name: ËßÑÂàôÂêçÁß∞
            priority: ËßÑÂàô‰ºòÂÖàÁ∫ßÔºåÊï∞Â≠óË∂äÂ§ß‰ºòÂÖàÁ∫ßË∂äÈ´ò
            enabled: ÊòØÂê¶ÂêØÁî®ËßÑÂàô
        """
        self.name = name
        self.priority = priority
        self.enabled = enabled
        self.logger = logging.getLogger(f"{__name__}.{self.__class__.__name__}")
    
    def __str__(self) -> str:
        return f"{self.name}(priority={self.priority}, enabled={self.enabled})"
    
    def __repr__(self) -> str:
        return f"{self.__class__.__name__}(name='{self.name}', priority={self.priority}, enabled={self.enabled})"
    
    @abstractmethod
    def should_apply(self, md_file: Path, config: Dict[str, Any]) -> bool:
        """
        Âà§Êñ≠ËßÑÂàôÊòØÂê¶Â∫îËØ•Â∫îÁî®Âà∞ÊåáÂÆöÊñá‰ª∂
        
        Args:
            md_file: MDÊñá‰ª∂Ë∑ØÂæÑ
            config: ÈÖçÁΩÆÂ≠óÂÖ∏
            
        Returns:
            Â¶ÇÊûúËßÑÂàôÂ∫îËØ•Â∫îÁî®ËøîÂõûTrueÔºåÂê¶ÂàôËøîÂõûFalse
        """
        pass
    
    @abstractmethod
    def execute(self, md_file: Path, apple_bridge, config: Dict[str, Any]) -> bool:
        """
        ÊâßË°åÂêåÊ≠•ËßÑÂàô
        
        Args:
            md_file: MDÊñá‰ª∂Ë∑ØÂæÑ
            apple_bridge: AppleScriptÊ°•Êé•ÂØπË±°
            config: ÈÖçÁΩÆÂ≠óÂÖ∏
            
        Returns:
            ÊâßË°åÊàêÂäüËøîÂõûTrueÔºåÂê¶ÂàôËøîÂõûFalse
        """
        pass
    
    def get_title(self, md_file: Path, config: Dict[str, Any]) -> str:
        """
        Ëé∑ÂèñÂ§áÂøòÂΩïÊ†áÈ¢ò
        
        Args:
            md_file: MDÊñá‰ª∂Ë∑ØÂæÑ
            config: ÈÖçÁΩÆÂ≠óÂÖ∏
            
        Returns:
            ÁîüÊàêÁöÑÂ§áÂøòÂΩïÊ†áÈ¢ò
        """
        notes_config = config.get('notes_config', {})
        
        # Âü∫Á°ÄÊ†áÈ¢òÔºàÊñá‰ª∂Âêç‰∏çÂê´Êâ©Â±ïÂêçÔºâ
        base_title = md_file.stem
        
        # Ê∑ªÂä†ÂâçÁºÄ
        prefix = notes_config.get('title_prefix', '')
        if prefix:
            base_title = f"{prefix}{base_title}"
        
        # Ê∑ªÂä†ÂêéÁºÄ
        suffix = notes_config.get('title_suffix', '')
        if suffix:
            base_title = f"{base_title}{suffix}"
        
        # Ê∑ªÂä†Êó∂Èó¥Êà≥ÔºàÂ¶ÇÊûúÂêØÁî®Ôºâ
        if notes_config.get('add_timestamp', False):
            from datetime import datetime
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            base_title = f"{base_title}_{timestamp}"
        
        return base_title
    
    def get_content(self, md_file: Path, config: Dict[str, Any]) -> str:
        """
        Ëé∑ÂèñÂ§áÂøòÂΩïÂÜÖÂÆπ
        
        Args:
            md_file: MDÊñá‰ª∂Ë∑ØÂæÑ
            config: ÈÖçÁΩÆÂ≠óÂÖ∏
            
        Returns:
            Â§ÑÁêÜÂêéÁöÑÂ§áÂøòÂΩïÂÜÖÂÆπ
        """
        try:
            # ËØªÂèñÊñá‰ª∂ÂÜÖÂÆπ
            encoding = config.get('sync_rules', {}).get('encoding', 'utf-8')
            with open(md_file, 'r', encoding=encoding) as f:
                content = f.read()
            
            # Ê∑ªÂä†Ê∫êÊñá‰ª∂Ë∑ØÂæÑÔºàÂ¶ÇÊûúÂêØÁî®Ôºâ
            notes_config = config.get('notes_config', {})
            if notes_config.get('add_source_path', False):
                source_info = f"\\n\\n---\\nüìÅ Ê∫êÊñá‰ª∂: {md_file}"
                content += source_info
            
            return content
            
        except UnicodeDecodeError as e:
            self.logger.error(f"Êñá‰ª∂ÁºñÁ†ÅÈîôËØØ: {md_file} - {e}")
            return f"‚ùå Êñá‰ª∂ÁºñÁ†ÅÈîôËØØÔºåÊó†Ê≥ïËØªÂèñÂÜÖÂÆπ\\nÊñá‰ª∂Ë∑ØÂæÑ: {md_file}"
        except Exception as e:
            self.logger.error(f"ËØªÂèñÊñá‰ª∂Â§±Ë¥•: {md_file} - {e}")
            return f"‚ùå ËØªÂèñÊñá‰ª∂Â§±Ë¥•: {str(e)}\\nÊñá‰ª∂Ë∑ØÂæÑ: {md_file}"
    
    def get_folder(self, md_file: Path, config: Dict[str, Any]) -> str:
        """
        Ëé∑ÂèñÁõÆÊ†áÊñá‰ª∂Â§πÂêçÁß∞
        
        Args:
            md_file: MDÊñá‰ª∂Ë∑ØÂæÑ
            config: ÈÖçÁΩÆÂ≠óÂÖ∏
            
        Returns:
            ÁõÆÊ†áÊñá‰ª∂Â§πÂêçÁß∞
        """
        # ÈªòËÆ§Êñá‰ª∂Â§π
        default_folder = config.get('notes_config', {}).get('default_folder', 'Notes')
        
        # Êñá‰ª∂Â§πÊò†Â∞Ñ
        folder_mappings = config.get('sync_rules', {}).get('folder_mappings', {})
        
        # Ê†πÊçÆÊñá‰ª∂Ë∑ØÂæÑÂåπÈÖçÊñá‰ª∂Â§π
        file_path_str = str(md_file).lower()
        
        for keyword, folder_name in folder_mappings.items():
            if keyword == 'default':
                continue
            if keyword.lower() in file_path_str:
                return folder_name
        
        # ËøîÂõûÈªòËÆ§Êñá‰ª∂Â§π
        return folder_mappings.get('default', default_folder)
    
    def should_ignore_file(self, md_file: Path, config: Dict[str, Any]) -> bool:
        """
        Ê£ÄÊü•Êñá‰ª∂ÊòØÂê¶Â∫îËØ•Ë¢´ÂøΩÁï•
        
        Args:
            md_file: MDÊñá‰ª∂Ë∑ØÂæÑ
            config: ÈÖçÁΩÆÂ≠óÂÖ∏
            
        Returns:
            Â¶ÇÊûúÂ∫îËØ•ÂøΩÁï•ËøîÂõûTrueÔºåÂê¶ÂàôËøîÂõûFalse
        """
        excluded_patterns = config.get('sync_rules', {}).get('excluded_patterns', [])
        
        file_name = md_file.name.lower()
        
        for pattern in excluded_patterns:
            pattern = pattern.lower()
            
            # ÁÆÄÂçïÈÄöÈÖçÁ¨¶ÂåπÈÖç
            if pattern.startswith('*') and pattern.endswith('*'):
                # *pattern* - ÂåÖÂê´ÂåπÈÖç
                if pattern[1:-1] in file_name:
                    return True
            elif pattern.startswith('*'):
                # *pattern - ÂêéÁºÄÂåπÈÖç
                if file_name.endswith(pattern[1:]):
                    return True
            elif pattern.endswith('*'):
                # pattern* - ÂâçÁºÄÂåπÈÖç
                if file_name.startswith(pattern[:-1]):
                    return True
            else:
                # ÂÆåÂÖ®ÂåπÈÖç
                if file_name == pattern:
                    return True
        
        return False
    
    def check_file_size(self, md_file: Path, config: Dict[str, Any]) -> bool:
        """
        Ê£ÄÊü•Êñá‰ª∂Â§ßÂ∞èÊòØÂê¶Ë∂ÖÈôê
        
        Args:
            md_file: MDÊñá‰ª∂Ë∑ØÂæÑ
            config: ÈÖçÁΩÆÂ≠óÂÖ∏
            
        Returns:
            Â¶ÇÊûúÊñá‰ª∂Â§ßÂ∞èÂêàÊ≥ïËøîÂõûTrueÔºåÂê¶ÂàôËøîÂõûFalse
        """
        max_size_mb = config.get('sync_rules', {}).get('max_file_size_mb', 50)
        
        try:
            file_size_mb = md_file.stat().st_size / (1024 * 1024)
            
            if file_size_mb > max_size_mb:
                self.logger.warning(f"Êñá‰ª∂Â§ßÂ∞èË∂ÖÈôê: {md_file} ({file_size_mb:.2f}MB > {max_size_mb}MB)")
                return False
            
            return True
            
        except Exception as e:
            self.logger.error(f"Ê£ÄÊü•Êñá‰ª∂Â§ßÂ∞èÂ§±Ë¥•: {md_file} - {e}")
            return False